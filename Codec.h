#pragma once

std::vector<unsigned char> GetCode_GetKeyState_x64()
{
    unsigned char buffer[] = {
            0x58, 0x55, 0x53, 0x56, 0x57, 0x52, 0x48, 0x83, 0xec, 0x78, 0x48, 0x8d, 0x6c, 0x24, 0x70, 0x48, 0x89,
            0x4d, 0xf4, 0x48, 0x89, 0x45, 0xf8, 0x83, 0x7d, 0xf4, 0x01, 0x75, 0x26, 0x48, 0x8b, 0x45, 0xf8, 0x48,
            0x83, 0x78, 0x68, 0x01, 0x75, 0x0f, 0x48, 0x83, 0xc4, 0x78, 0x5a, 0x5f, 0x5e, 0x5b, 0x5d, 0xb8, 0x01,
            0x80, 0x00, 0x00, 0xc3, 0x48, 0x83, 0xc4, 0x78, 0x5a, 0x5f, 0x5e, 0x5b, 0x5d, 0x31, 0xc0, 0xc3, 0x48,
            0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x45, 0xc8, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83,
            0xc0, 0x20, 0x48, 0x89, 0x45, 0xc0, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x00, 0x48, 0x89, 0x45, 0xb8,
            0x48, 0x8b, 0x45, 0xf8, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x55, 0xb8, 0x4c, 0x8b, 0x45, 0xc0, 0x48, 0x89,
            0xc1, 0x48, 0x8b, 0x45, 0xc8, 0x41, 0xb9, 0x20, 0x00, 0x00, 0x00, 0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44,
            0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x00, 0x8b, 0x4d,
            0xf4, 0xff, 0xd0, 0x66, 0x89, 0x45, 0xf2, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89,
            0x45, 0xe0, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc0, 0x40, 0x48, 0x89, 0x45, 0xd8, 0x48, 0x8b, 0x45,
            0xf8, 0x48, 0x8b, 0x00, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8b, 0x45, 0xf8, 0xff, 0x50, 0x08, 0x48, 0x8b,
            0x55, 0xd0, 0x4c, 0x8b, 0x45, 0xd8, 0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xe0, 0x41, 0xb9, 0x20, 0x00,
            0x00, 0x00, 0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b,
            0x45, 0xf2, 0x48, 0x83, 0xc4, 0x78, 0x5a, 0x5f, 0x5e, 0x5b, 0x5d, 0xc3,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetMessageW_x64()
{
    unsigned char buffer[] = {
        0x58, 0x55, 0x48, 0x83, 0xec, 0x50, 0x48, 0x8d, 0x6c, 0x24, 0x50, 0x48, 0x89, 0x4d, 0xe8, 0x48, 0x89,
        0x45, 0xf0, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x89, 0x45, 0xd8, 0x48, 0x8b, 0x45,
        0xd8, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x7f, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x48, 0x10, 0x48,
        0x8b, 0x45, 0xe8, 0x48, 0x89, 0x08, 0x48, 0x8b, 0x45, 0xd8, 0x8b, 0x48, 0x18, 0x48, 0x8b, 0x45, 0xe8,
        0x89, 0x48, 0x08, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x48, 0x20, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x89,
        0x48, 0x10, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x48, 0x28, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x89, 0x48,
        0x18, 0x48, 0x8b, 0x45, 0xd8, 0x8b, 0x48, 0x30, 0x48, 0x8b, 0x45, 0xe8, 0x89, 0x48, 0x20, 0x48, 0x8b,
        0x45, 0xd8, 0x8b, 0x48, 0x34, 0x48, 0x8b, 0x45, 0xe8, 0x89, 0x48, 0x24, 0x48, 0x8b, 0x45, 0xd8, 0x8b,
        0x48, 0x38, 0x48, 0x8b, 0x45, 0xe8, 0x89, 0x48, 0x28, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x08, 0x48,
        0x8b, 0x45, 0xf0, 0x48, 0x89, 0x48, 0x60, 0xc7, 0x45, 0xe4, 0x01, 0x00, 0x00, 0x00, 0xeb, 0x1e, 0x48,
        0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x00, 0x48, 0x8b, 0x4d, 0xe8, 0x31, 0xd2, 0x45, 0x31, 0xc9, 0x45, 0x89,
        0xc8, 0xff, 0xd0, 0x89, 0x45, 0xd4, 0x8b, 0x45, 0xd4, 0x89, 0x45, 0xe4, 0x8b, 0x45, 0xe4, 0x48, 0x83,
        0xc4, 0x50, 0x5d, 0xc3,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetMessageW_Invasive_x64()
{ // TODO：多线程优化
    // TODO：其他HWND获取方法
    unsigned char buffer[] = {
            0x58, 0x55, 0x48, 0x83, 0xec, 0x50, 0x48, 0x8d, 0x6c, 0x24, 0x50, 0x48, 0x89, 0x4d, 0xe8, 0x48,
            0x89, 0x45, 0xf0, 0x48, 0x89, 0x7d, 0xe0, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x68, 0x48,
            0x89, 0x45, 0xd8, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x60, 0x48, 0x83,
            0x7d, 0xe0, 0x00, 0x74, 0x59, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x4d,
            0xe0, 0x48, 0x8b, 0x49, 0x28, 0x48, 0x39, 0xc8, 0x75, 0x44, 0x48, 0x8b, 0x45, 0xd8, 0x48, 0xc7,
            0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x8b,
            0x4d, 0xd8, 0x4c, 0x8b, 0x49, 0x28, 0x48, 0x8b, 0x4d, 0xd8, 0x4c, 0x8b, 0x41, 0x20, 0x48, 0x8b,
            0x4d, 0xd8, 0x8b, 0x51, 0x18, 0x48, 0x8b, 0x4d, 0xd8, 0x48, 0x8b, 0x49, 0x10, 0xff, 0xd0, 0x48,
            0x8b, 0x45, 0xd8, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x89, 0x48, 0x68, 0x48, 0x8b,
            0x4d, 0xe8, 0x48, 0x83, 0xc4, 0x50, 0x5d, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetPointerType_x64()
{
    unsigned char buffer[] = {
        0x58, 0x55, 0x48, 0x81, 0xec, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d, 0xac, 0x24, 0x80, 0x00, 0x00, 0x00,
        0x89, 0x4d, 0x1c, 0x48, 0x89, 0x55, 0x10, 0x4c, 0x89, 0x45, 0x08, 0x4c, 0x89, 0x4d, 0x00, 0x48, 0x89,
        0x45, 0x20, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x60, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8b, 0x45,
        0xf0, 0x83, 0x78, 0x04, 0x00, 0x74, 0x54, 0x48, 0xc7, 0x45, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x45, 0xe8, 0x48, 0x8b, 0x4d, 0xf0, 0x8b, 0x49, 0x04, 0x48, 0x39, 0xc8, 0x73, 0x3a, 0x48, 0x8b, 0x45,
        0xf0, 0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x4d, 0xe8, 0x8b, 0x04, 0x88, 0x3b, 0x45, 0x1c, 0x75, 0x16,
        0x48, 0x8b, 0x45, 0x10, 0xc7, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xfc, 0x01, 0x00, 0x00, 0x00,
        0xe9, 0xca, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x83, 0xc0, 0x01, 0x48, 0x89,
        0x45, 0xe8, 0xeb, 0xb6, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x45,
        0xc0, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x83, 0xc0, 0x18, 0x48, 0x89, 0x45, 0xb8, 0x48, 0x8b, 0x45, 0x20,
        0x48, 0x8b, 0x00, 0x48, 0x89, 0x45, 0xb0, 0x48, 0x8b, 0x45, 0x20, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x55,
        0xb0, 0x4c, 0x8b, 0x45, 0xb8, 0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xc0, 0x41, 0xb9, 0x20, 0x00, 0x00,
        0x00, 0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x4d,
        0x1c, 0x48, 0x8b, 0x55, 0x10, 0x4c, 0x8b, 0x45, 0x08, 0x4c, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x45, 0x20,
        0xff, 0x10, 0x89, 0x45, 0xe4, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x45, 0xd8,
        0x48, 0x8b, 0x45, 0x20, 0x48, 0x83, 0xc0, 0x38, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8b, 0x45, 0x20, 0x48,
        0x8b, 0x00, 0x48, 0x89, 0x45, 0xc8, 0x48, 0x8b, 0x45, 0x20, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x55, 0xc8,
        0x4c, 0x8b, 0x45, 0xd0, 0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xd8, 0x41, 0xb9, 0x20, 0x00, 0x00, 0x00,
        0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x45, 0xe4,
        0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x48, 0x81, 0xc4, 0xb0, 0x00, 0x00, 0x00, 0x5d, 0xc3,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetPointerType_1_x64(unsigned char type)
{
    unsigned char buffer[] = {
        0x58, 0x55, 0x53, 0x57, 0x56, 0x41, 0x52, 0x48, 0x81, 0xec, 0xb0, 0x00, 0x00, 0x00, 0x48, 0x8d,
        0xac, 0x24, 0x80, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x45, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x89, 0x4d,
        0x1c, 0x48, 0x89, 0x55, 0x10, 0x4c, 0x89, 0x45, 0x08, 0x4c, 0x89, 0x4d, 0x00, 0x48, 0x89, 0x45,
        0x20, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x68, 0x48, 0x89, 0x45, 0xf0, 0x48, 0x8b, 0x45,
        0xf0, 0x48, 0x83, 0x78, 0x08, 0x00, 0x75, 0x59, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x8b,
        0x4d, 0xf0, 0x48, 0x3b, 0x41, 0x10, 0x73, 0x47, 0x8b, 0x45, 0x1c, 0x48, 0x8b, 0x4d, 0xf0, 0x48,
        0x8b, 0x55, 0xe8, 0x0f, 0xb7, 0x4c, 0x51, 0x18, 0x39, 0xc8, 0x75, 0x25, 0x48, 0x8b, 0x45, 0xf0,
        0x48, 0x8b, 0x08, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x89, 0x48, 0x68, 0x48, 0x8b, 0x45, 0x10, 0xc7,
        0x00, type, 0x00, 0x00, 0x00, 0xc7, 0x45, 0xfc, 0x01, 0x00, 0x00, 0x00, 0xe9, 0xc8, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x83, 0xc0, 0x01, 0x48, 0x89, 0x45, 0xe8, 0xeb, 0xab, 0xeb,
        0x00, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x45, 0xc0, 0x48, 0x8b, 0x45,
        0x20, 0x48, 0x83, 0xc0, 0x20, 0x48, 0x89, 0x45, 0xb8, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x00,
        0x48, 0x89, 0x45, 0xb0, 0x48, 0x8b, 0x45, 0x20, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x55, 0xb0, 0x4c,
        0x8b, 0x45, 0xb8, 0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xc0, 0x41, 0xb9, 0x20, 0x00, 0x00, 0x00,
        0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x4d,
        0x1c, 0x48, 0x8b, 0x55, 0x10, 0x4c, 0x8b, 0x45, 0x08, 0x4c, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x45,
        0x20, 0xff, 0x10, 0x89, 0x45, 0xe4, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89,
        0x45, 0xd8, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x83, 0xc0, 0x40, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8b,
        0x45, 0x20, 0x48, 0x8b, 0x00, 0x48, 0x89, 0x45, 0xc8, 0x48, 0x8b, 0x45, 0x20, 0xff, 0x50, 0x08,
        0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8b, 0x45, 0xd0, 0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xd8, 0x41,
        0xb9, 0x20, 0x00, 0x00, 0x00, 0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x8b, 0x45, 0xe4, 0x89, 0x45, 0xfc, 0x8b, 0x45, 0xfc, 0x48, 0x81, 0xc4, 0xb0,
        0x00, 0x00, 0x00, 0x41, 0x5a, 0x5e, 0x5f, 0x5b, 0x5d, 0xc3,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetPointerTouchInfo_x64(UINT64 count)
{
    unsigned char buffer[] = {
            0x58, 0x55, 0x53, 0x57, 0x56, 0x41, 0x52, 0x48, 0x81, 0xec, 0xc0, 0x00, 0x00, 0x00, 0x48, 0x8d,
            0xac, 0x24, 0x80, 0x00, 0x00, 0x00, 0x89, 0x4d, 0x2c, 0x48, 0x89, 0x55, 0x20, 0x4c, 0x89, 0x45,
            0x18, 0x4c, 0x89, 0x4d, 0x10, 0x48, 0x89, 0x45, 0x30, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x40,
            0x68, 0x48, 0x89, 0x45, 0x00, 0x48, 0xc7, 0x45, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x45,
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x48, 0xb8, 0x21, 0x43, 0x65, 0x87, 0x78, 0x56, 0x34, 0x12, 0x48,
            0x89, 0x45, 0xe8, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x83, 0x78, 0x08, 0x00, 0x0f, 0x85, 0x97, 0x00,
            0x00, 0x00, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x4d, 0x00, 0x48, 0x3b, 0x41, 0x10,
            0x0f, 0x83, 0x81, 0x00, 0x00, 0x00, 0x8b, 0x45, 0x2c, 0x48, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x55,
            0xf8, 0x0f, 0xb7, 0x4c, 0x51, 0x18, 0x39, 0xc8, 0x75, 0x61, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0xf0,
            0x48, 0x3b, 0x45, 0xe8, 0x74, 0x3a, 0x48, 0x8b, 0x45, 0x00, 0x48, 0x83, 0xc0, 0x28, 0x48, 0x8b,
            0x4d, 0xf8, 0x48, 0x0f, 0xaf, 0x4d, 0xe8, 0x48, 0xc1, 0xe1, 0x03, 0x48, 0x01, 0xc8, 0x48, 0x8b,
            0x4d, 0xf0, 0x48, 0x8b, 0x14, 0xc8, 0x48, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x4d, 0xf0, 0x48, 0x89,
            0x14, 0xc8, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x83, 0xc0, 0x01, 0x48, 0x89, 0x45, 0xf0, 0xeb, 0xbc,
            0x48, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x08, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x89, 0x48, 0x68, 0xc7,
            0x45, 0x0c, 0x01, 0x00, 0x00, 0x00, 0xe9, 0xc6, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x45, 0xf8, 0x48,
            0x83, 0xc0, 0x01, 0x48, 0x89, 0x45, 0xf8, 0xeb, 0x00, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x40,
            0x10, 0x48, 0x89, 0x45, 0xc0, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x83, 0xc0, 0x20, 0x48, 0x89, 0x45,
            0xb8, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x00, 0x48, 0x89, 0x45, 0xb0, 0x48, 0x8b, 0x45, 0x30,
            0xff, 0x50, 0x08, 0x48, 0x8b, 0x55, 0xb0, 0x4c, 0x8b, 0x45, 0xb8, 0x48, 0x89, 0xc1, 0x48, 0x8b,
            0x45, 0xc0, 0x41, 0xb9, 0x20, 0x00, 0x00, 0x00, 0x45, 0x31, 0xd2, 0x48, 0xc7, 0x44, 0x24, 0x20,
            0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x4d, 0x2c, 0x48, 0x8b, 0x55, 0x20, 0x4c, 0x8b, 0x45,
            0x18, 0x4c, 0x8b, 0x4d, 0x10, 0x48, 0x8b, 0x45, 0x30, 0xff, 0x10, 0x89, 0x45, 0xe4, 0x48, 0x8b,
            0x45, 0x30, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x89, 0x45, 0xd8, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x83,
            0xc0, 0x40, 0x48, 0x89, 0x45, 0xd0, 0x48, 0x8b, 0x45, 0x30, 0x48, 0x8b, 0x00, 0x48, 0x89, 0x45,
            0xc8, 0x48, 0x8b, 0x45, 0x30, 0xff, 0x50, 0x08, 0x48, 0x8b, 0x55, 0xc8, 0x4c, 0x8b, 0x45, 0xd0,
            0x48, 0x89, 0xc1, 0x48, 0x8b, 0x45, 0xd8, 0x41, 0xb9, 0x20, 0x00, 0x00, 0x00, 0x45, 0x31, 0xd2,
            0x48, 0xc7, 0x44, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x8b, 0x45, 0xe4, 0x89, 0x45,
            0x0c, 0x8b, 0x45, 0x0c, 0x48, 0x81, 0xc4, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x5a, 0x5e, 0x5f, 0x5b,
            0x5d, 0xc3,
    };
    *(UINT64*)(buffer + 0x47) = count;
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

std::vector<unsigned char> GetCode_GetPointerTouchInfo_aaa_x64()
{
    unsigned char buffer[] = {
            0x58, 0x48, 0xc7, 0xc0, 0x01, 0x00, 0x00, 0x00, 0xc3,
    };
    std::vector<unsigned char> ret;
    ret.assign(buffer, buffer + sizeof(buffer));
    return ret;
}

// class CodeGenerator {};

//std::vector<unsigned char> GetCode_Jmp(UINT64 addr)
//{
//    unsigned char base_code = {
//
//    };
//}